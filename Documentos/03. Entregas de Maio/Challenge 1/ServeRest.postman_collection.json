{
	"info": {
		"_postman_id": "4f92ffff-a428-4d00-915c-5b3f284ee16f",
		"name": "ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44572612",
		"_collection_link": "https://cloudy-water-3704291.postman.co/workspace/Tha%C3%ADs's-Workspace~0ad6b6a5-159e-4feb-8d5b-24682920a478/collection/44572612-4f92ffff-a428-4d00-915c-5b3f284ee16f?action=share&source=collection_link&creator=44572612"
	},
	"item": [
		{
			"name": "Usuários",
			"item": [
				{
					"name": "Criar Usuário - STATUS 201 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Valida criação do usuário\r",
									"pm.test(\"Status 201 - Usuário criado\", function() {\r",
									"    pm.response.to.have.status(201);\r",
									"    const response = pm.response.json();\r",
									"    \r",
									"    // Armazena dados CORRETAMENTE\r",
									"    pm.environment.set(\"userEmail\", pm.request.body.raw.email);\r",
									"    pm.environment.set(\"userPassword\", pm.request.body.raw.password);\r",
									"    \r",
									"    // DEBUG: Mostra valores no console\r",
									"    console.log(\"Email armazenado:\", pm.environment.get(\"userEmail\"));\r",
									"    console.log(\"Senha armazenada:\", pm.environment.get(\"userPassword\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Usuário Teste\",\r\n  \"email\": \"teste{{$randomInt}}@servrest.com\",\r\n  \"password\": \"senha{{$randomInt}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "E-mail duplicado - STATUS 400 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[Cadastro] Status 400 - E-mail já existe\", () => {\r",
									"  pm.response.to.have.status(400);\r",
									"  pm.expect(pm.response.json().message).to.include(\"Este email já está sendo usado\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Usuário Repetido\",\r\n  \"email\": \"{{userEmail}}\",  // Mesmo e-mail usado no cadastro bem-sucedido\r\n  \"password\": \"outrasenha123\",\r\n  \"administrador\": \"false\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "E-mail e senha inválidos - STATUS 400 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gerar e-mail inválido (exemplos corrigidos)\r",
									"const domains = ['gmail.com', 'hotmail.com'];\r",
									"const invalidEmailScenarios = [\r",
									"  () => `sem_arroba_${domains[Math.floor(Math.random() * domains.length)]}`, // Ex: \"sem_arroba_gmail.com\"\r",
									"  () => `com.espaco@ ${domains[Math.floor(Math.random() * domains.length)]}`, // Ex: \"com.espaco@ gmail.com\"\r",
									"  () => `@semusuario.${domains[Math.floor(Math.random() * domains.length)]}`, // Ex: \"@semusuario.gmail.com\"\r",
									"];\r",
									"const generateInvalidEmail = invalidEmailScenarios[Math.floor(Math.random() * invalidEmailScenarios.length)];\r",
									"pm.environment.set('invalid_email', generateInvalidEmail());\r",
									"\r",
									"// Gerar password inválido (comprimento <4 ou >11)\r",
									"const passwordLength = Math.random() < 0.5 ? 3 : 12;\r",
									"const invalidPassword = Array(passwordLength + 1).join('x'); \r",
									"pm.environment.set('invalid_password', invalidPassword);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificar status code 400\r",
									"pm.test(\"Status code 400\", () => {\r",
									"  pm.expect(pm.response.code).to.eq(400);\r",
									"});\r",
									"\r",
									"// Validar mensagens de erro\r",
									"pm.test(\"Erros esperados retornados\", () => {\r",
									"  const response = pm.response.json();\r",
									"  pm.expect(response).to.have.property('email', 'email deve ser um email válido');\r",
									"  pm.expect(response).to.have.property('password', 'password é obrigatório'); // ou outra mensagem específica\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlMTc0Njc1NjY3MkBzZXJ2cmVzdC5jb20iLCJwYXNzd29yZCI6InNlbmhhNjQ3IiwiaWF0IjoxNzQ2NzY0NzM5LCJleHAiOjE3NDY3NjUzMzl9.q2mmnW0hUrHWMxkitexv84VaXy0GSeYAgehrCU5Tju4",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"U\",\r\n    \"email\": \"{{invalid_email}}\",\r\n    \"password\": \"{{invalid_password}}\",\r\n    \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "E-mail válido e senha inválida - STATUS 200 ISSUE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Valida status code 400 (Bad Request)\r",
									"pm.test(\"Status code 400 - Senha inválida\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// 2. Valida mensagem de erro geral\r",
									"pm.test(\"Mensagem de erro esperada\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.have.property(\"message\", \"Dados inválidos\"); // Ajuste conforme sua API\r",
									"});\r",
									"\r",
									"// 3. Valida erro específico no campo \"password\"\r",
									"pm.test(\"Erro na validação da senha\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    // Verifica se há erro no campo \"password\"\r",
									"    pm.expect(responseJson.errors).to.be.an('array').that.includes.something.that.deep.include({\r",
									"        field: \"password\",\r",
									"        message: \"Senha deve ter entre 4 e 11 caracteres\" // Ajuste conforme sua API\r",
									"    });\r",
									"\r",
									"    // Verifica que o campo \"email\" NÃO tem erro (já que foi gerado como válido)\r",
									"    pm.expect(responseJson.errors).to.not.include.something.that.deep.include({\r",
									"        field: \"email\"\r",
									"    });\r",
									"});\r",
									"\r",
									"// 4. Valida que o campo \"administrador\" foi processado corretamente (opcional)\r",
									"pm.test(\"Campo 'administrador' é false\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data).to.not.exist; // Ou ajuste conforme a lógica da API\r",
									"});\r",
									"\r",
									"// 5. Log dos valores usados na requisição (para depuração)\r",
									"console.log(\"E-mail válido gerado:\", pm.variables.get(\"valid_email\"));\r",
									"console.log(\"Senha inválida usada:\", pm.variables.get(\"invalid_password\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Gera e-mail válido (ex: teste@yahoo.com)\r",
									"const randomUser = Math.random().toString(36).substring(2, 10);\r",
									"const validEmail = `${randomUser}@yahoo.com`;\r",
									"\r",
									"// Gera senha inválida\r",
									"const invalidPassword = 'xxx';\r",
									"\r",
									"// Define as variáveis (sem usar ambiente)\r",
									"pm.variables.set(\"valid_email\", validEmail);\r",
									"pm.variables.set(\"invalid_password\", invalidPassword);\r",
									"pm.variables.set(\"administrador\", \"false\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Usuário Teste\",\r\n    \"email\": \"{{valid_email}}\",\r\n    \"password\": \"{{invalid_password}}\",\r\n    \"administrador\": \"{{administrador}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "ID inexistente - STATUS 201 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Verifica status 404\r",
									"pm.test(\"[PUT] Status 404 - ID inexistente\", function() {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// 2. Valida mensagem de erro (opcional)\r",
									"pm.test(\"[PUT] Mensagem de erro adequada\", function() {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.message).to.include(\"Usuário não encontrado\");\r",
									"});\r",
									"\r",
									"// 3. DEBUG: Mostra resposta completa no console\r",
									"console.log(\"Resposta completa:\", pm.response.json());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Usuário Teste\",\r\n  \"email\": \"novoemail@teste.com\",\r\n  \"password\": \"senha123\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/ID_INEXISTENTE_123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"ID_INEXISTENTE_123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar usuário com senha inválida",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Consulta ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Usuário Teste\",\r\n    \"email\": \"{{valid_email}}\",\r\n    \"password\": \"{{invalid_password}}\",\r\n    \"administrador\": \"{{administrador}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Autenticação",
			"item": [
				{
					"name": "Login e token - STATUS 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// DEBUG: Verifica valores recebidos\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"console.log(\"Email usado no login:\", requestBody.email);\r",
									"console.log(\"Senha usada no login:\", requestBody.password);\r",
									"\r",
									"// Valida login\r",
									"pm.test(\"Status 200 - Login válido\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJlbHRyYW5vMjNAcWEuY29tLmJyIiwicGFzc3dvcmQiOiJ0ZXN0ZSIsImlhdCI6MTc0NjczNTk3NSwiZXhwIjoxNzQ2NzM2NTc1fQ.3s_zLMGQOq7233EbdT0f-RMMc2Ear7ab8fo20tcMZYo",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{userEmail}}\",\r\n    \"password\": \"{{userPassword}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Cadastrar produto - STATUS 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Produto criado com sucesso\", () => {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.environment.set(\"produtoId\", pm.response.json()._id);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNzQ2NzU4NzU0LCJleHAiOjE3NDY3NTkzNTR9.fATq1w_F-WyoZSDHspx8LvH6ksymwUVIXgXq7kqJHsU",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Produto\",\r\n  \"preco\": 99,\r\n  \"descricao\": \"Criado via Postman\",\r\n  \"quantidade\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir produto - STATUS 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Produto excluído com sucesso\", () => {\r",
									"  pm.response.to.have.status(200);\r",
									"  pm.expect(pm.response.json().message).to.eql(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{produtoId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{produtoId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar produtos - STATUS 200 OK",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Listar quantidade estoque - STATUS 200 OK",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlMTc0Njc1NjY3MkBzZXJ2cmVzdC5jb20iLCJwYXNzd29yZCI6InNlbmhhNjQ3IiwiaWF0IjoxNzQ2NzY0NzM5LCJleHAiOjE3NDY3NjUzMzl9.q2mmnW0hUrHWMxkitexv84VaXy0GSeYAgehrCU5Tju4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar quantidade estoque após excluir carrinho - STATUS 200 OK",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlMTc0Njc1NjY3MkBzZXJ2cmVzdC5jb20iLCJwYXNzd29yZCI6InNlbmhhNjQ3IiwiaWF0IjoxNzQ2NzY0NzM5LCJleHAiOjE3NDY3NjUzMzl9.q2mmnW0hUrHWMxkitexv84VaXy0GSeYAgehrCU5Tju4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "Cadastrar carrinho - STATUS 201 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"cartId\", pm.response.json()._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImZ1bGFub0BxYS5jb20iLCJwYXNzd29yZCI6InRlc3RlIiwiaWF0IjoxNzQ2NzU5ODk5LCJleHAiOjE3NDY3NjA0OTl9.B-_dKjRkRRRzqMcuHWF_r_GHy07o20tnhU5ZMHcZyX8",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"produtos\": [\r\n        {\r\n            \"idProduto\": \"{{productId}}\",\r\n            \"quantidade\": 7\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Excluir carrinho - STATUS 200 OK",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3RlMTc0Njc1NjY3MkBzZXJ2cmVzdC5jb20iLCJwYXNzd29yZCI6InNlbmhhNjQ3IiwiaWF0IjoxNzQ2NzY0NzM5LCJleHAiOjE3NDY3NjUzMzl9.q2mmnW0hUrHWMxkitexv84VaXy0GSeYAgehrCU5Tju4",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"_id\": \"dWshrhTBGkC9ImD6\"\r\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}